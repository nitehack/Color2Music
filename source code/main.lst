CCS PCM C Compiler, Version 4.104, 5967               03-ene.-15 19:02

               Filename: C:\Users\Ali\Documents\GitHub\Color2Music\source code\main.lst

               ROM used: 1706 words (42%)
                         Largest free fragment is 2048
               RAM used: 71 (19%) at main() level
                         117 (32%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   598
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.4
001B:  GOTO   01E
001C:  BTFSC  0B.1
001D:  GOTO   02F
001E:  MOVF   22,W
001F:  MOVWF  04
0020:  MOVF   23,W
0021:  MOVWF  77
0022:  MOVF   24,W
0023:  MOVWF  78
0024:  MOVF   25,W
0025:  MOVWF  79
0026:  MOVF   26,W
0027:  MOVWF  7A
0028:  MOVF   27,W
0029:  MOVWF  0A
002A:  SWAPF  21,W
002B:  MOVWF  03
002C:  SWAPF  7F,F
002D:  SWAPF  7F,W
002E:  RETFIE
002F:  BCF    0A.3
0030:  GOTO   031
.................... #include "main.h" 
.................... #include <16F88.h> 
.................... //////// Standard Header file for the PIC16F88 device //////////////// 
.................... #device PIC16F88 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES MCLR                     //Master Clear pin enabled 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
.................... #FUSES CCPB3                    // Ponemos este fuse para que el PWM salga por la patilla 9 ya que  por defecto está en la 6 y esa ya se usa 
....................  
.................... #use delay(clock=8000000) 
*
005D:  MOVLW  A0
005E:  MOVWF  04
005F:  BCF    03.7
0060:  MOVF   00,W
0061:  BTFSC  03.2
0062:  GOTO   070
0063:  MOVLW  02
0064:  MOVWF  78
0065:  CLRF   77
0066:  DECFSZ 77,F
0067:  GOTO   066
0068:  DECFSZ 78,F
0069:  GOTO   065
006A:  MOVLW  97
006B:  MOVWF  77
006C:  DECFSZ 77,F
006D:  GOTO   06C
006E:  DECFSZ 00,F
006F:  GOTO   063
0070:  RETURN
....................  
....................  
.................... #include "sound.c" 
.................... //Con esta libreria se pueden generar sonidos 
.................... //La función genera sonido esta ya calculada para un reloj de 8 MHz para el rango  
.................... // de frecuencias que nos interesa para esta aplicación. 
.................... //Habria que hacer una función más general. 
....................  
.................... #IFNDEF SIn 
.................... #define SIn 126 
.................... #define LABn 133 
.................... #define LAn 141 
.................... #define SOLBn 150 
.................... #define SOLn 159 
.................... #define FABn 168 
.................... #define FAn 178 
.................... #define MIn 189 
.................... #define REBn 200 
.................... #define REn 212 
.................... #define DOBn 225 
.................... #define DOn 238 
.................... #define NONE 0 
.................... #define ntime 20 
.................... #ENDIF 
....................  
.................... void init_sound(){ 
....................    setup_ccp1(CCP_PWM); //Indicamos que queremos usar el PWM 
*
0055:  BSF    03.5
0056:  BCF    06.3
0057:  BCF    03.5
0058:  BCF    06.3
0059:  MOVLW  0C
005A:  MOVWF  17
.................... } 
005B:  BCF    0A.3
005C:  GOTO   5F8 (RETURN)
....................  
.................... void genera_sonido(int8 sonido){ 
....................    int16 value; 
....................    if(sonido!=0){ 
*
0562:  MOVF   60,F
0563:  BTFSC  03.2
0564:  GOTO   596
....................       value=(4*((int16)sonido+1))/2; 
0565:  CLRF   64
0566:  MOVLW  01
0567:  ADDWF  60,W
0568:  MOVWF  78
0569:  MOVF   64,W
056A:  MOVWF  7A
056B:  BTFSC  03.0
056C:  INCF   7A,F
056D:  RLF    78,W
056E:  MOVWF  63
056F:  RLF    7A,W
0570:  MOVWF  64
0571:  RLF    63,F
0572:  RLF    64,F
0573:  MOVLW  FC
0574:  ANDWF  63,F
0575:  BCF    03.0
0576:  RRF    64,W
0577:  MOVWF  62
0578:  RRF    63,W
0579:  MOVWF  61
....................       setup_timer_2(T2_DIV_BY_16, sonido ,4);  
057A:  MOVLW  18
057B:  MOVWF  78
057C:  IORLW  06
057D:  MOVWF  12
057E:  MOVF   60,W
057F:  BSF    03.5
0580:  MOVWF  12
....................       set_pwm1_duty(value); //se establece el ciclo de trabajo 
0581:  BCF    03.5
0582:  MOVF   62,W
0583:  MOVWF  79
0584:  MOVF   61,W
0585:  MOVWF  78
0586:  RRF    79,F
0587:  RRF    78,F
0588:  RRF    79,F
0589:  RRF    78,F
058A:  RRF    79,F
058B:  MOVF   78,W
058C:  MOVWF  15
058D:  RRF    79,F
058E:  RRF    79,W
058F:  ANDLW  30
0590:  MOVWF  77
0591:  MOVF   17,W
0592:  ANDLW  CF
0593:  IORWF  77,W
0594:  MOVWF  17
....................    } 
....................    else{ 
0595:  GOTO   597
....................       set_pwm1_duty(0); 
0596:  CLRF   15
....................    } 
.................... } 
0597:  RETURN
....................  
.................... #include "color.c" 
.................... /* 
.................... Los pines que se indican en los "defines" son del sensor TCS3200 yl-64 
.................... */ 
.................... #include "frequency.c" 
.................... int16 tiempo=0; 
.................... //Esta librería mide la frecuencia de una señal que entr por RB0 
.................... #INT_EXT 
.................... void llega_pulso(void) { 
....................    tiempo=get_timer1(); // 
*
0031:  MOVF   0F,W
0032:  MOVWF  7A
0033:  MOVF   0E,W
0034:  MOVWF  77
0035:  MOVF   0F,W
0036:  SUBWF  7A,W
0037:  BTFSS  03.2
0038:  GOTO   031
0039:  MOVF   77,W
003A:  MOVWF  28
003B:  MOVF   7A,W
003C:  MOVWF  29
....................    set_timer1(0); //reinicia para nuevo pulso 
003D:  CLRF   0F
003E:  CLRF   0E
.................... } 
....................  
003F:  BCF    0B.1
0040:  BCF    0A.3
0041:  GOTO   01E
.................... void init_freq(){ 
....................    ext_int_edge(0,L_TO_H); //Flanco ascendente 
0042:  BSF    03.5
0043:  BSF    01.6
....................    enable_interrupts(INT_EXT); 
0044:  BCF    03.5
0045:  BSF    0B.4
....................    clear_interrupt(INT_EXT); //Borramos el flag 
0046:  BCF    0B.1
....................    enable_interrupts(GLOBAL); 
0047:  MOVLW  C0
0048:  IORWF  0B,F
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_4);//para llegar a medir frecuencias bajas 
0049:  MOVLW  A5
004A:  MOVWF  10
.................... } 
....................  
.................... int16 calcula_frecuencia(){ 
....................    int16 tiempo_cal; 
....................    int16 frecuencia; 
....................    tiempo_cal=tiempo*2; //Es 4ciclos*T*4 del preescaler*ELm timer 
*
00B1:  BCF    03.0
00B2:  RLF    28,W
00B3:  BSF    03.5
00B4:  MOVWF  22
00B5:  BCF    03.5
00B6:  RLF    29,W
00B7:  BSF    03.5
00B8:  MOVWF  23
....................    frecuencia=1000000.0/tiempo_cal; //esto es porque 1/(2N*micro)=(10^6)/2N 
00B9:  MOVF   23,W
00BA:  MOVWF  27
00BB:  MOVF   22,W
00BC:  MOVWF  26
00BD:  BCF    03.5
00BE:  CALL   071
00BF:  BSF    03.5
00C0:  CLRF   29
00C1:  MOVLW  24
00C2:  MOVWF  28
00C3:  MOVLW  74
00C4:  MOVWF  27
00C5:  MOVLW  92
00C6:  MOVWF  26
00C7:  MOVF   7A,W
00C8:  MOVWF  2D
00C9:  MOVF   79,W
00CA:  MOVWF  2C
00CB:  MOVF   78,W
00CC:  MOVWF  2B
00CD:  MOVF   77,W
00CE:  MOVWF  2A
*
0198:  MOVF   7A,W
0199:  MOVWF  29
019A:  MOVF   79,W
019B:  MOVWF  28
019C:  MOVF   78,W
019D:  MOVWF  27
019E:  MOVF   77,W
019F:  MOVWF  26
01A0:  BCF    03.5
01A1:  CALL   090
01A2:  MOVF   79,W
01A3:  BSF    03.5
01A4:  MOVWF  25
01A5:  MOVF   78,W
01A6:  MOVWF  24
....................    return frecuencia; 
01A7:  MOVF   24,W
01A8:  MOVWF  78
01A9:  MOVF   25,W
01AA:  MOVWF  79
.................... } 
01AB:  BCF    03.5
01AC:  RETURN
....................  
....................  
....................  
....................  
.................... #IFNDEF S0 
.................... #define S0 PIN_B1 
.................... #define S1 PIN_B2 
.................... #define S2 PIN_B6 
.................... #define S3 PIN_B4 
.................... #define OE PIN_B5 
.................... #ENDIF 
....................  
.................... float nivel=1.53; 
.................... int8 offset_r=167;//167 
.................... int8 offset_g=133;//133 
.................... int8 offset_b=149;//149 
.................... float gan_r=0.654678;//1 
.................... float gan_g=0.812162;//1.22408 
.................... float gan_b=0.739696;//1.08115 
....................  
.................... //Habria que hacer una función "init_tcs" mas general para poder seleccionar otros rangos 
.................... void init_tcs(){ 
....................    init_freq(); 
....................    output_low(S0);// Para seleccionar el rango de 12 KHz 
*
004B:  BSF    03.5
004C:  BCF    06.1
004D:  BCF    03.5
004E:  BCF    06.1
....................    output_high(S1); 
004F:  BSF    03.5
0050:  BCF    06.2
0051:  BCF    03.5
0052:  BSF    06.2
.................... } 
0053:  BCF    0A.3
0054:  GOTO   5F7 (RETURN)
....................  
.................... void leer_frecuencia_color(int16 *frecuencia_R, int16 *frecuencia_G, int16 *frecuencia_B, int16 *frecuencia_C){ 
....................    float f_R_inter; 
....................    float f_G_inter; 
....................    float f_B_inter; 
....................    float f_C_inter; 
....................     
....................    output_high(OE); 
*
0265:  BSF    03.5
0266:  BCF    06.5
0267:  BCF    03.5
0268:  BSF    06.5
....................    output_low(S2); 
0269:  BSF    03.5
026A:  BCF    06.6
026B:  BCF    03.5
026C:  BCF    06.6
....................    output_low(S3); 
026D:  BSF    03.5
026E:  BCF    06.4
026F:  BCF    03.5
0270:  BCF    06.4
....................     
....................    delay_ms(1); 
0271:  MOVLW  01
0272:  BSF    03.5
0273:  MOVWF  20
0274:  BCF    03.5
0275:  CALL   05D
....................    output_low(OE); 
0276:  BSF    03.5
0277:  BCF    06.5
0278:  BCF    03.5
0279:  BCF    06.5
....................    delay_ms(10); 
027A:  MOVLW  0A
027B:  BSF    03.5
027C:  MOVWF  20
027D:  BCF    03.5
027E:  CALL   05D
....................    f_R_inter=calcula_frecuencia()-offset_r; 
027F:  CALL   0B1
0280:  MOVF   79,W
0281:  MOVWF  75
0282:  MOVF   78,W
0283:  MOVWF  74
0284:  MOVF   2E,W
0285:  SUBWF  78,W
0286:  MOVWF  77
0287:  MOVF   79,W
0288:  MOVWF  7A
0289:  MOVLW  00
028A:  BTFSS  03.0
028B:  MOVLW  01
028C:  SUBWF  7A,F
028D:  MOVF   77,W
028E:  BSF    03.5
028F:  MOVWF  26
0290:  MOVF   7A,W
0291:  MOVWF  27
0292:  BCF    03.5
0293:  CALL   071
0294:  MOVF   7A,W
0295:  MOVWF  6B
0296:  MOVF   79,W
0297:  MOVWF  6A
0298:  MOVF   78,W
0299:  MOVWF  69
029A:  MOVF   77,W
029B:  MOVWF  68
....................    f_R_inter=f_R_inter*gan_r; 
029C:  MOVF   6B,W
029D:  BSF    03.5
029E:  MOVWF  23
029F:  BCF    03.5
02A0:  MOVF   6A,W
02A1:  BSF    03.5
02A2:  MOVWF  22
02A3:  BCF    03.5
02A4:  MOVF   69,W
02A5:  BSF    03.5
02A6:  MOVWF  21
02A7:  BCF    03.5
02A8:  MOVF   68,W
02A9:  BSF    03.5
02AA:  MOVWF  20
02AB:  BCF    03.5
02AC:  MOVF   34,W
02AD:  BSF    03.5
02AE:  MOVWF  27
02AF:  BCF    03.5
02B0:  MOVF   33,W
02B1:  BSF    03.5
02B2:  MOVWF  26
02B3:  BCF    03.5
02B4:  MOVF   32,W
02B5:  BSF    03.5
02B6:  MOVWF  25
02B7:  BCF    03.5
02B8:  MOVF   31,W
02B9:  BSF    03.5
02BA:  MOVWF  24
02BB:  BCF    03.5
02BC:  CALL   1AD
02BD:  MOVF   7A,W
02BE:  MOVWF  6B
02BF:  MOVF   79,W
02C0:  MOVWF  6A
02C1:  MOVF   78,W
02C2:  MOVWF  69
02C3:  MOVF   77,W
02C4:  MOVWF  68
....................     
....................    if(f_R_inter<0){ 
02C5:  MOVF   6B,W
02C6:  BSF    03.5
02C7:  MOVWF  23
02C8:  BCF    03.5
02C9:  MOVF   6A,W
02CA:  BSF    03.5
02CB:  MOVWF  22
02CC:  BCF    03.5
02CD:  MOVF   69,W
02CE:  BSF    03.5
02CF:  MOVWF  21
02D0:  BCF    03.5
02D1:  MOVF   68,W
02D2:  BSF    03.5
02D3:  MOVWF  20
02D4:  CLRF   27
02D5:  CLRF   26
02D6:  CLRF   25
02D7:  CLRF   24
02D8:  BCF    03.5
02D9:  CALL   224
02DA:  BTFSS  03.0
02DB:  GOTO   2E6
....................       *frecuencia_R=0;    
02DC:  MOVF   60,W
02DD:  MOVWF  04
02DE:  BCF    03.7
02DF:  BTFSC  61.0
02E0:  BSF    03.7
02E1:  INCF   04,F
02E2:  CLRF   00
02E3:  DECF   04,F
02E4:  CLRF   00
....................    } 
....................    else{ 
02E5:  GOTO   304
....................       *frecuencia_R=(int16)f_R_inter; 
02E6:  MOVF   61,W
02E7:  MOVWF  7A
02E8:  MOVF   60,W
02E9:  MOVWF  04
02EA:  BCF    03.7
02EB:  BTFSC  61.0
02EC:  BSF    03.7
02ED:  MOVF   6B,W
02EE:  BSF    03.5
02EF:  MOVWF  29
02F0:  BCF    03.5
02F1:  MOVF   6A,W
02F2:  BSF    03.5
02F3:  MOVWF  28
02F4:  BCF    03.5
02F5:  MOVF   69,W
02F6:  BSF    03.5
02F7:  MOVWF  27
02F8:  BCF    03.5
02F9:  MOVF   68,W
02FA:  BSF    03.5
02FB:  MOVWF  26
02FC:  BCF    03.5
02FD:  CALL   090
02FE:  INCF   04,F
02FF:  MOVF   79,W
0300:  MOVWF  00
0301:  DECF   04,F
0302:  MOVF   78,W
0303:  MOVWF  00
....................    } 
....................     
....................     
....................    //Azul 
....................    output_high(OE); 
0304:  BSF    03.5
0305:  BCF    06.5
0306:  BCF    03.5
0307:  BSF    06.5
....................    output_low(S2); 
0308:  BSF    03.5
0309:  BCF    06.6
030A:  BCF    03.5
030B:  BCF    06.6
....................    output_high(S3); 
030C:  BSF    03.5
030D:  BCF    06.4
030E:  BCF    03.5
030F:  BSF    06.4
....................     
....................    delay_ms(1); 
0310:  MOVLW  01
0311:  BSF    03.5
0312:  MOVWF  20
0313:  BCF    03.5
0314:  CALL   05D
....................    output_low(OE); 
0315:  BSF    03.5
0316:  BCF    06.5
0317:  BCF    03.5
0318:  BCF    06.5
....................    delay_ms(10); 
0319:  MOVLW  0A
031A:  BSF    03.5
031B:  MOVWF  20
031C:  BCF    03.5
031D:  CALL   05D
....................    f_B_inter=calcula_frecuencia()-offset_b; 
031E:  CALL   0B1
031F:  MOVF   79,W
0320:  MOVWF  75
0321:  MOVF   78,W
0322:  MOVWF  74
0323:  MOVF   30,W
0324:  SUBWF  78,W
0325:  MOVWF  77
0326:  MOVF   79,W
0327:  MOVWF  7A
0328:  MOVLW  00
0329:  BTFSS  03.0
032A:  MOVLW  01
032B:  SUBWF  7A,F
032C:  MOVF   77,W
032D:  BSF    03.5
032E:  MOVWF  26
032F:  MOVF   7A,W
0330:  MOVWF  27
0331:  BCF    03.5
0332:  CALL   071
0333:  MOVF   7A,W
0334:  MOVWF  73
0335:  MOVF   79,W
0336:  MOVWF  72
0337:  MOVF   78,W
0338:  MOVWF  71
0339:  MOVF   77,W
033A:  MOVWF  70
....................    f_B_inter=f_B_inter*gan_b; 
033B:  MOVF   73,W
033C:  BSF    03.5
033D:  MOVWF  23
033E:  MOVF   72,W
033F:  MOVWF  22
0340:  MOVF   71,W
0341:  MOVWF  21
0342:  MOVF   70,W
0343:  MOVWF  20
0344:  BCF    03.5
0345:  MOVF   3C,W
0346:  BSF    03.5
0347:  MOVWF  27
0348:  BCF    03.5
0349:  MOVF   3B,W
034A:  BSF    03.5
034B:  MOVWF  26
034C:  BCF    03.5
034D:  MOVF   3A,W
034E:  BSF    03.5
034F:  MOVWF  25
0350:  BCF    03.5
0351:  MOVF   39,W
0352:  BSF    03.5
0353:  MOVWF  24
0354:  BCF    03.5
0355:  CALL   1AD
0356:  MOVF   7A,W
0357:  MOVWF  73
0358:  MOVF   79,W
0359:  MOVWF  72
035A:  MOVF   78,W
035B:  MOVWF  71
035C:  MOVF   77,W
035D:  MOVWF  70
....................    if(f_B_inter<0){ 
035E:  MOVF   73,W
035F:  BSF    03.5
0360:  MOVWF  23
0361:  MOVF   72,W
0362:  MOVWF  22
0363:  MOVF   71,W
0364:  MOVWF  21
0365:  MOVF   70,W
0366:  MOVWF  20
0367:  CLRF   27
0368:  CLRF   26
0369:  CLRF   25
036A:  CLRF   24
036B:  BCF    03.5
036C:  CALL   224
036D:  BTFSS  03.0
036E:  GOTO   379
....................       *frecuencia_B=0;    
036F:  MOVF   64,W
0370:  MOVWF  04
0371:  BCF    03.7
0372:  BTFSC  65.0
0373:  BSF    03.7
0374:  INCF   04,F
0375:  CLRF   00
0376:  DECF   04,F
0377:  CLRF   00
....................    } 
....................    else{ 
0378:  GOTO   391
....................       *frecuencia_B=(int16)f_B_inter; 
0379:  MOVF   65,W
037A:  MOVWF  7A
037B:  MOVF   64,W
037C:  MOVWF  04
037D:  BCF    03.7
037E:  BTFSC  65.0
037F:  BSF    03.7
0380:  MOVF   73,W
0381:  BSF    03.5
0382:  MOVWF  29
0383:  MOVF   72,W
0384:  MOVWF  28
0385:  MOVF   71,W
0386:  MOVWF  27
0387:  MOVF   70,W
0388:  MOVWF  26
0389:  BCF    03.5
038A:  CALL   090
038B:  INCF   04,F
038C:  MOVF   79,W
038D:  MOVWF  00
038E:  DECF   04,F
038F:  MOVF   78,W
0390:  MOVWF  00
....................    } 
....................     
....................    //Verde 
....................    output_high(OE); 
0391:  BSF    03.5
0392:  BCF    06.5
0393:  BCF    03.5
0394:  BSF    06.5
....................    output_high(S2); 
0395:  BSF    03.5
0396:  BCF    06.6
0397:  BCF    03.5
0398:  BSF    06.6
....................    output_high(S3); 
0399:  BSF    03.5
039A:  BCF    06.4
039B:  BCF    03.5
039C:  BSF    06.4
....................     
....................    delay_ms(1); 
039D:  MOVLW  01
039E:  BSF    03.5
039F:  MOVWF  20
03A0:  BCF    03.5
03A1:  CALL   05D
....................    output_low(OE); 
03A2:  BSF    03.5
03A3:  BCF    06.5
03A4:  BCF    03.5
03A5:  BCF    06.5
....................    delay_ms(10); 
03A6:  MOVLW  0A
03A7:  BSF    03.5
03A8:  MOVWF  20
03A9:  BCF    03.5
03AA:  CALL   05D
....................    f_G_inter=calcula_frecuencia()-offset_g; 
03AB:  CALL   0B1
03AC:  MOVF   79,W
03AD:  MOVWF  75
03AE:  MOVF   78,W
03AF:  MOVWF  74
03B0:  MOVF   2F,W
03B1:  SUBWF  78,W
03B2:  MOVWF  77
03B3:  MOVF   79,W
03B4:  MOVWF  7A
03B5:  MOVLW  00
03B6:  BTFSS  03.0
03B7:  MOVLW  01
03B8:  SUBWF  7A,F
03B9:  MOVF   77,W
03BA:  BSF    03.5
03BB:  MOVWF  26
03BC:  MOVF   7A,W
03BD:  MOVWF  27
03BE:  BCF    03.5
03BF:  CALL   071
03C0:  MOVF   7A,W
03C1:  MOVWF  6F
03C2:  MOVF   79,W
03C3:  MOVWF  6E
03C4:  MOVF   78,W
03C5:  MOVWF  6D
03C6:  MOVF   77,W
03C7:  MOVWF  6C
....................    f_G_inter=f_G_inter*gan_g; 
03C8:  MOVF   6F,W
03C9:  BSF    03.5
03CA:  MOVWF  23
03CB:  BCF    03.5
03CC:  MOVF   6E,W
03CD:  BSF    03.5
03CE:  MOVWF  22
03CF:  BCF    03.5
03D0:  MOVF   6D,W
03D1:  BSF    03.5
03D2:  MOVWF  21
03D3:  BCF    03.5
03D4:  MOVF   6C,W
03D5:  BSF    03.5
03D6:  MOVWF  20
03D7:  BCF    03.5
03D8:  MOVF   38,W
03D9:  BSF    03.5
03DA:  MOVWF  27
03DB:  BCF    03.5
03DC:  MOVF   37,W
03DD:  BSF    03.5
03DE:  MOVWF  26
03DF:  BCF    03.5
03E0:  MOVF   36,W
03E1:  BSF    03.5
03E2:  MOVWF  25
03E3:  BCF    03.5
03E4:  MOVF   35,W
03E5:  BSF    03.5
03E6:  MOVWF  24
03E7:  BCF    03.5
03E8:  CALL   1AD
03E9:  MOVF   7A,W
03EA:  MOVWF  6F
03EB:  MOVF   79,W
03EC:  MOVWF  6E
03ED:  MOVF   78,W
03EE:  MOVWF  6D
03EF:  MOVF   77,W
03F0:  MOVWF  6C
....................    if(f_G_inter<0){ 
03F1:  MOVF   6F,W
03F2:  BSF    03.5
03F3:  MOVWF  23
03F4:  BCF    03.5
03F5:  MOVF   6E,W
03F6:  BSF    03.5
03F7:  MOVWF  22
03F8:  BCF    03.5
03F9:  MOVF   6D,W
03FA:  BSF    03.5
03FB:  MOVWF  21
03FC:  BCF    03.5
03FD:  MOVF   6C,W
03FE:  BSF    03.5
03FF:  MOVWF  20
0400:  CLRF   27
0401:  CLRF   26
0402:  CLRF   25
0403:  CLRF   24
0404:  BCF    03.5
0405:  CALL   224
0406:  BTFSS  03.0
0407:  GOTO   412
....................       *frecuencia_G=0;    
0408:  MOVF   62,W
0409:  MOVWF  04
040A:  BCF    03.7
040B:  BTFSC  63.0
040C:  BSF    03.7
040D:  INCF   04,F
040E:  CLRF   00
040F:  DECF   04,F
0410:  CLRF   00
....................    } 
....................    else{ 
0411:  GOTO   430
....................       *frecuencia_G=(int16)f_G_inter; 
0412:  MOVF   63,W
0413:  MOVWF  7A
0414:  MOVF   62,W
0415:  MOVWF  04
0416:  BCF    03.7
0417:  BTFSC  63.0
0418:  BSF    03.7
0419:  MOVF   6F,W
041A:  BSF    03.5
041B:  MOVWF  29
041C:  BCF    03.5
041D:  MOVF   6E,W
041E:  BSF    03.5
041F:  MOVWF  28
0420:  BCF    03.5
0421:  MOVF   6D,W
0422:  BSF    03.5
0423:  MOVWF  27
0424:  BCF    03.5
0425:  MOVF   6C,W
0426:  BSF    03.5
0427:  MOVWF  26
0428:  BCF    03.5
0429:  CALL   090
042A:  INCF   04,F
042B:  MOVF   79,W
042C:  MOVWF  00
042D:  DECF   04,F
042E:  MOVF   78,W
042F:  MOVWF  00
....................    } 
....................     
....................    //Claro 
....................    output_high(OE); 
0430:  BSF    03.5
0431:  BCF    06.5
0432:  BCF    03.5
0433:  BSF    06.5
....................    output_high(S2); 
0434:  BSF    03.5
0435:  BCF    06.6
0436:  BCF    03.5
0437:  BSF    06.6
....................    output_low(S3); 
0438:  BSF    03.5
0439:  BCF    06.4
043A:  BCF    03.5
043B:  BCF    06.4
....................     
....................    delay_ms(1); 
043C:  MOVLW  01
043D:  BSF    03.5
043E:  MOVWF  20
043F:  BCF    03.5
0440:  CALL   05D
....................    output_low(OE); 
0441:  BSF    03.5
0442:  BCF    06.5
0443:  BCF    03.5
0444:  BCF    06.5
....................    delay_ms(10); 
0445:  MOVLW  0A
0446:  BSF    03.5
0447:  MOVWF  20
0448:  BCF    03.5
0449:  CALL   05D
....................    *frecuencia_C=calcula_frecuencia(); 
044A:  MOVF   67,W
044B:  MOVWF  7A
044C:  MOVF   66,W
044D:  MOVWF  74
044E:  MOVF   67,W
044F:  MOVWF  75
0450:  CALL   0B1
0451:  MOVF   74,W
0452:  MOVWF  04
0453:  BCF    03.7
0454:  BTFSC  75.0
0455:  BSF    03.7
0456:  INCF   04,F
0457:  MOVF   79,W
0458:  MOVWF  00
0459:  DECF   04,F
045A:  MOVF   78,W
045B:  MOVWF  00
....................     
....................  
.................... } 
045C:  BCF    0A.3
045D:  GOTO   605 (RETURN)
....................  
.................... int8 busca_maximo(int16 vector[], int8 elementos){ 
....................    int8 i; 
....................    int8 indice; 
....................    int16 mayor; 
....................    mayor=vector[0]; 
045E:  BSF    03.5
045F:  MOVF   24,W
0460:  MOVWF  04
0461:  BCF    03.7
0462:  BTFSC  25.0
0463:  BSF    03.7
0464:  INCF   04,F
0465:  MOVF   00,W
0466:  MOVWF  7A
0467:  DECF   04,F
0468:  MOVF   00,W
0469:  MOVWF  29
046A:  MOVF   7A,W
046B:  MOVWF  2A
....................    indice=0; 
046C:  CLRF   28
....................    for(i=0;i<elementos;i++){ 
046D:  CLRF   27
046E:  MOVF   26,W
046F:  SUBWF  27,W
0470:  BTFSC  03.0
0471:  GOTO   49C
....................       if(vector[i]>mayor){ 
0472:  BCF    03.0
0473:  RLF    27,W
0474:  ADDWF  24,W
0475:  MOVWF  04
0476:  BCF    03.7
0477:  BTFSC  25.0
0478:  BSF    03.7
0479:  INCF   04,F
047A:  MOVF   00,W
047B:  MOVWF  2C
047C:  DECF   04,F
047D:  MOVF   00,W
047E:  MOVWF  2B
047F:  MOVF   2A,W
0480:  SUBWF  2C,W
0481:  BTFSS  03.0
0482:  GOTO   49A
0483:  BTFSS  03.2
0484:  GOTO   489
0485:  MOVF   2B,W
0486:  SUBWF  29,W
0487:  BTFSC  03.0
0488:  GOTO   49A
....................          mayor=vector[i]; 
0489:  BCF    03.0
048A:  RLF    27,W
048B:  ADDWF  24,W
048C:  MOVWF  04
048D:  BCF    03.7
048E:  BTFSC  25.0
048F:  BSF    03.7
0490:  INCF   04,F
0491:  MOVF   00,W
0492:  MOVWF  7A
0493:  DECF   04,F
0494:  MOVF   00,W
0495:  MOVWF  29
0496:  MOVF   7A,W
0497:  MOVWF  2A
....................          indice=i; 
0498:  MOVF   27,W
0499:  MOVWF  28
....................       } 
....................    } 
049A:  INCF   27,F
049B:  GOTO   46E
....................    return indice; 
049C:  MOVF   28,W
049D:  MOVWF  78
.................... } 
049E:  BCF    03.5
049F:  RETURN
....................  
.................... int8 busca_maximo2(int16 vector[], int8 elementos){ 
....................    int8 i; 
....................    int8 indice; 
....................    int8 max; 
....................    int16 mayor; 
....................    max=busca_maximo(vector,elementos); 
*
0501:  MOVF   7C,W
0502:  BSF    03.5
0503:  MOVWF  25
0504:  MOVF   7B,W
0505:  MOVWF  24
0506:  MOVF   7D,W
0507:  MOVWF  26
0508:  BCF    03.5
0509:  CALL   45E
050A:  MOVF   78,W
050B:  BSF    03.5
050C:  MOVWF  21
....................    mayor=0; 
050D:  CLRF   23
050E:  CLRF   22
....................    indice=0; 
050F:  CLRF   20
....................    for(i=0;i<elementos;i++){ 
0510:  CLRF   7E
0511:  MOVF   7D,W
0512:  SUBWF  7E,W
0513:  BTFSC  03.0
0514:  GOTO   543
....................       if(i!=max){ 
0515:  MOVF   21,W
0516:  SUBWF  7E,W
0517:  BTFSC  03.2
0518:  GOTO   541
....................          if(vector[i]>mayor){ 
0519:  BCF    03.0
051A:  RLF    7E,W
051B:  ADDWF  7B,W
051C:  MOVWF  04
051D:  BCF    03.7
051E:  BTFSC  7C.0
051F:  BSF    03.7
0520:  INCF   04,F
0521:  MOVF   00,W
0522:  MOVWF  25
0523:  DECF   04,F
0524:  MOVF   00,W
0525:  MOVWF  24
0526:  MOVF   23,W
0527:  SUBWF  25,W
0528:  BTFSS  03.0
0529:  GOTO   541
052A:  BTFSS  03.2
052B:  GOTO   530
052C:  MOVF   24,W
052D:  SUBWF  22,W
052E:  BTFSC  03.0
052F:  GOTO   541
....................             mayor=vector[i]; 
0530:  BCF    03.0
0531:  RLF    7E,W
0532:  ADDWF  7B,W
0533:  MOVWF  04
0534:  BCF    03.7
0535:  BTFSC  7C.0
0536:  BSF    03.7
0537:  INCF   04,F
0538:  MOVF   00,W
0539:  MOVWF  7A
053A:  DECF   04,F
053B:  MOVF   00,W
053C:  MOVWF  22
053D:  MOVF   7A,W
053E:  MOVWF  23
....................             indice=i; 
053F:  MOVF   7E,W
0540:  MOVWF  20
....................          } 
....................       } 
....................    } 
0541:  INCF   7E,F
0542:  GOTO   511
....................    return indice; 
0543:  MOVF   20,W
0544:  MOVWF  78
.................... } 
....................  
.................... //Otro metodo 
.................... int8 detectar_color(int16 fred, int16 fblue,int16 fgreen, int16 fclear){ 
*
04A9:  MOVLW  08
04AA:  MOVWF  73
....................    int16 rgb[3]={0,0,0};    
*
04A0:  CLRF   68
04A1:  CLRF   69
04A2:  CLRF   6A
04A3:  CLRF   6B
04A4:  CLRF   6C
04A5:  CLRF   6D
....................    int8 rgb2[3]={0,0,0}; 
04A6:  CLRF   6E
04A7:  CLRF   6F
04A8:  CLRF   70
....................    int8 max1,max2; 
....................    int8 color=8; 
....................    int16 direccion; 
....................     
....................    rgb[0]=fred; 
*
04AB:  MOVF   61,W
04AC:  MOVWF  69
04AD:  MOVF   60,W
04AE:  MOVWF  68
....................    rgb[1]=fgreen; 
04AF:  MOVF   65,W
04B0:  MOVWF  6B
04B1:  MOVF   64,W
04B2:  MOVWF  6A
....................    rgb[2]=fblue; 
04B3:  MOVF   63,W
04B4:  MOVWF  6D
04B5:  MOVF   62,W
04B6:  MOVWF  6C
....................    max1=busca_maximo(rgb,3); 
04B7:  BSF    03.5
04B8:  CLRF   25
04B9:  MOVLW  68
04BA:  MOVWF  24
04BB:  MOVLW  03
04BC:  MOVWF  26
04BD:  BCF    03.5
04BE:  CALL   45E
04BF:  MOVF   78,W
04C0:  MOVWF  71
....................    if(fclear>10000){ 
04C1:  MOVF   67,W
04C2:  SUBLW  26
04C3:  BTFSC  03.0
04C4:  GOTO   4CF
04C5:  XORLW  FF
04C6:  BTFSS  03.2
04C7:  GOTO   4CC
04C8:  MOVF   66,W
04C9:  SUBLW  10
04CA:  BTFSC  03.0
04CB:  GOTO   4CF
....................       color=7; 
04CC:  MOVLW  07
04CD:  MOVWF  73
....................    } 
....................    else if(fclear<3000){ 
04CE:  GOTO   55E
04CF:  MOVF   67,W
04D0:  SUBLW  0B
04D1:  BTFSS  03.0
04D2:  GOTO   4DB
04D3:  BTFSS  03.2
04D4:  GOTO   4D9
04D5:  MOVF   66,W
04D6:  SUBLW  B7
04D7:  BTFSS  03.0
04D8:  GOTO   4DB
....................       color=0; 
04D9:  CLRF   73
....................    } 
....................    else{ 
04DA:  GOTO   55E
....................       if(fclear<6600){ 
04DB:  MOVF   67,W
04DC:  SUBLW  19
04DD:  BTFSS  03.0
04DE:  GOTO   4FC
04DF:  BTFSS  03.2
04E0:  GOTO   4E5
04E1:  MOVF   66,W
04E2:  SUBLW  C7
04E3:  BTFSS  03.0
04E4:  GOTO   4FC
....................           
....................          switch(max1){ 
04E5:  MOVF   71,W
04E6:  BTFSC  03.2
04E7:  GOTO   4EF
04E8:  XORLW  01
04E9:  BTFSC  03.2
04EA:  GOTO   4F2
04EB:  XORLW  03
04EC:  BTFSC  03.2
04ED:  GOTO   4F5
04EE:  GOTO   4F8
....................             case 0: 
....................                color=4; 
04EF:  MOVLW  04
04F0:  MOVWF  73
....................                break; 
04F1:  GOTO   4FB
....................             case 1: 
....................                color=2; 
04F2:  MOVLW  02
04F3:  MOVWF  73
....................                break; 
04F4:  GOTO   4FB
....................             case 2: 
....................                color=1; 
04F5:  MOVLW  01
04F6:  MOVWF  73
....................                break; 
04F7:  GOTO   4FB
....................             default: 
....................                color=8; 
04F8:  MOVLW  08
04F9:  MOVWF  73
....................                break; 
04FA:  GOTO   4FB
....................          } 
....................       } 
....................       else{ 
04FB:  GOTO   55E
....................          max2=busca_maximo2(rgb,3); 
04FC:  CLRF   7C
04FD:  MOVLW  68
04FE:  MOVWF  7B
04FF:  MOVLW  03
0500:  MOVWF  7D
*
0545:  MOVF   78,W
0546:  MOVWF  72
....................          rgb2[max1]=1; 
0547:  MOVLW  6E
0548:  ADDWF  71,W
0549:  MOVWF  04
054A:  BCF    03.7
054B:  MOVLW  01
054C:  MOVWF  00
....................          rgb2[max2]=1; 
054D:  MOVLW  6E
054E:  ADDWF  72,W
054F:  MOVWF  04
0550:  BCF    03.7
0551:  MOVLW  01
0552:  MOVWF  00
....................          color=(rgb2[0]<<2)+(rgb2[1]<<1)+rgb2[2]; 
0553:  BCF    03.5
0554:  RLF    6E,W
0555:  MOVWF  7B
0556:  RLF    7B,F
0557:  MOVLW  FC
0558:  ANDWF  7B,F
0559:  BCF    03.0
055A:  RLF    6F,W
055B:  ADDWF  7B,W
055C:  ADDWF  70,W
055D:  MOVWF  73
....................       } 
....................       } 
....................    return color; 
055E:  MOVF   73,W
055F:  MOVWF  78
....................  
.................... } 
0560:  BCF    0A.3
0561:  GOTO   61A (RETURN)
....................  
.................... //Buscar el mas chico y dividirlo entre el más chico. Los que esten por encima de un nivel son "1" y los que sean menores son "0" 
.................... //! 
.................... //!int8 detectar_color(int16 fred, int16 fblue,int16 fgreen){ 
.................... //!   int8 color; 
.................... //!   int16 mini=1; 
.................... //!   float nred; 
.................... //!   float nblue; 
.................... //!   float ngreen; 
.................... //!   int8 bitred; 
.................... //!   int8 bitblue; 
.................... //!   int8 bitgreen; 
.................... //!    
.................... //!   if(fred<fblue){ 
.................... //!      if(fred<fgreen){ 
.................... //!         mini=fred; 
.................... //!      } 
.................... //!      else{ 
.................... //!         mini=fgreen; 
.................... //!      } 
.................... //!   } 
.................... //!   else{ 
.................... //!      if(fblue<fgreen){ 
.................... //!         mini=fblue; 
.................... //!      } 
.................... //!      else{ 
.................... //!         mini=fgreen; 
.................... //!      } 
.................... //!   } 
.................... //!   nred=(float)fred/(float)mini; 
.................... //!   nblue=(float)fblue/(float)mini; 
.................... //!   ngreen=(float)fgreen/(float)mini; 
.................... //!    
.................... //!   if(nred>nivel){ 
.................... //!      bitred=1; 
.................... //!   } 
.................... //!   else{ 
.................... //!      bitred=0; 
.................... //!   } 
.................... //!   if(nblue>nivel){ 
.................... //!      bitblue=1; 
.................... //!   } 
.................... //!   else{ 
.................... //!      bitblue=0; 
.................... //!   } 
.................... //!   if(ngreen>nivel){ 
.................... //!      bitgreen=1; 
.................... //!   } 
.................... //!   else{ 
.................... //!      bitgreen=0; 
.................... //!   } 
.................... //!   color=(bitred<<2)+(bitgreen<<1)+bitblue; 
.................... //!    
.................... //!   if(color==0){ 
.................... //!      if(fred>1000){ 
.................... //!         color=7; 
.................... //!      } 
.................... //!   } 
.................... //!   else if((fred<1000)&&(fblue<1000)&&(fgreen<1000)){ 
.................... //!      color=8; 
.................... //!   } 
.................... //!    
.................... //!   return color; 
.................... //!} 
.................... //! 
.................... //! 
....................  
....................  
.................... //COLOR2MUSIC 
.................... //Autor: Nicolás Guerrero García (Nitehack) 
.................... //Resumen: Transforma un sonido físico a una nota músical, pudiendo así generar musica con diferentes objetos de diferentes colores. 
....................  
....................  
....................  
.................... //ANOTACIONES: 
.................... //Hay que poner el máximo de frecuencia para medir tiempos muy cortos y el minimo de 
.................... // rango para que el error para medir la frecuencia con el metodo de medir 
.................... // el periodo sea minimo ya que falla solo cuando son muy altas las frecuencias 
.................... //Preescaler de 4 con minimo de 7 Hz 
.................... // Si se desborda el timer poner una interrupcion y poner de frecuencia 0Hz 
.................... //Poner reloj de 20 MHz externo 
.................... //Al final el reloj va a ser el de 8 MHz interno 
.................... // Se puede poner un umbral para considerar colo o no 
....................  
.................... //Informacion 
.................... //----------- 
.................... // Con 12 KHz 
.................... //Maxima frecuencia para R: 13157 Hz  
.................... //Maxima frecuencia para B: 13157 Hz (En hexadecimal 3365 Hz) 
.................... // Maxima frecuencia para G:  11111 Hz (En hexadecimal 2B67) 
.................... //MinimaR:169 Hz (A9) 
.................... // Minima G: 135 Hz (87) 
.................... //Minima B: 150 Hz (96) 
....................  
.................... //Que hay que hacer: 
.................... //------------------ 
.................... //Corregir error de 0 y de ganancia para los 3 filtros 
.................... //Posibles problemas!!:  
.................... //---------------------- 
.................... //Que el contador del timer se desborde por que pase demasiado tiempo , es decir cuando sean bajas frecuencias 
.................... // 
.................... //Sonido 
.................... //------ 
.................... //Espectro de frecuencias de sonido: 30 Hz a 15 KHz 
.................... //PeridoPWM= (periodo_TMR2+1)·4·Tosc· prescaler_TMR2 
.................... //Hay que poner el preescaler el mas alto (16) ya que buscamos el myor rango entre 30 y 15 KHz, y para conseguir 
.................... //He usado desde 523 Hz hasta 980 Hz, y se puede usar un total de 12 notas 
....................  
....................  
.................... //Para corregir el offset del sensor 
....................  
.................... //Capturar flanco-> contar tiempo-> Capturar flanco-> Parar tiempo-> Leer tiempo-> Cambiar a frecuencia 
....................  
....................  
.................... void main() 
.................... { 
*
0598:  CLRF   04
0599:  BCF    03.7
059A:  MOVLW  1F
059B:  ANDWF  03,F
059C:  MOVLW  72
059D:  BSF    03.5
059E:  MOVWF  0F
059F:  MOVF   0F,W
05A0:  BCF    03.5
05A1:  CLRF   29
05A2:  CLRF   28
05A3:  MOVLW  0A
05A4:  MOVWF  2D
05A5:  MOVLW  D7
05A6:  MOVWF  2C
05A7:  MOVLW  43
05A8:  MOVWF  2B
05A9:  MOVLW  7F
05AA:  MOVWF  2A
05AB:  MOVLW  A7
05AC:  MOVWF  2E
05AD:  MOVLW  85
05AE:  MOVWF  2F
05AF:  MOVLW  95
05B0:  MOVWF  30
05B1:  MOVLW  FA
05B2:  MOVWF  34
05B3:  MOVLW  98
05B4:  MOVWF  33
05B5:  MOVLW  27
05B6:  MOVWF  32
05B7:  MOVLW  7E
05B8:  MOVWF  31
05B9:  MOVLW  D9
05BA:  MOVWF  38
05BB:  MOVLW  E9
05BC:  MOVWF  37
05BD:  MOVLW  4F
05BE:  MOVWF  36
05BF:  MOVLW  7E
05C0:  MOVWF  35
05C1:  MOVLW  B8
05C2:  MOVWF  3C
05C3:  MOVLW  5C
05C4:  MOVWF  3B
05C5:  MOVLW  3D
05C6:  MOVWF  3A
05C7:  MOVLW  7E
05C8:  MOVWF  39
05C9:  BSF    03.5
05CA:  BCF    1F.4
05CB:  BCF    1F.5
05CC:  MOVF   1B,W
05CD:  ANDLW  80
05CE:  MOVWF  1B
05CF:  MOVLW  07
05D0:  MOVWF  1C
05D1:  BCF    03.5
05D2:  CLRF   3E
05D3:  CLRF   3D
05D4:  CLRF   40
05D5:  CLRF   3F
05D6:  CLRF   42
05D7:  CLRF   41
05D8:  CLRF   44
05D9:  CLRF   43
05DA:  CLRF   45
05DB:  CLRF   46
05DC:  CLRF   47
05DD:  CLRF   48
05DE:  CLRF   49
05DF:  CLRF   4A
*
05F1:  CLRF   5C
05F2:  MOVLW  11
05F3:  MOVWF  5D
05F4:  CLRF   5E
05F5:  CLRF   5F
....................    int16 frecuencia_R=0; 
....................    int16 frecuencia_G=0; 
....................    int16 frecuencia_B=0; 
....................    int16 frecuencia_C=0; 
....................    int8 i=0; 
....................    int8 dato=0; 
....................    int8 maximo=0; 
....................    int8 direccion=0; 
....................    int8 color=0; 
....................    int8 colorant=0; 
....................    int8 buffer[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; 
*
05E0:  CLRF   4B
05E1:  CLRF   4C
05E2:  CLRF   4D
05E3:  CLRF   4E
05E4:  CLRF   4F
05E5:  CLRF   50
05E6:  CLRF   51
05E7:  CLRF   52
05E8:  CLRF   53
05E9:  CLRF   54
05EA:  CLRF   55
05EB:  CLRF   56
05EC:  CLRF   57
05ED:  CLRF   58
05EE:  CLRF   59
05EF:  CLRF   5A
05F0:  CLRF   5B
....................    int8 cuenta=0; 
....................    int8 capacidad=17; 
....................    int8 inicio=0; 
....................    int8 lleno=0; 
....................     
....................    init_tcs(); 
*
05F6:  GOTO   042
....................    init_sound(); 
05F7:  GOTO   055
....................     
....................    while(true){ 
....................       leer_frecuencia_color(&frecuencia_R,&frecuencia_G, &frecuencia_B, &frecuencia_C); 
05F8:  CLRF   61
05F9:  MOVLW  3D
05FA:  MOVWF  60
05FB:  CLRF   63
05FC:  MOVLW  3F
05FD:  MOVWF  62
05FE:  CLRF   65
05FF:  MOVLW  41
0600:  MOVWF  64
0601:  CLRF   67
0602:  MOVLW  43
0603:  MOVWF  66
0604:  GOTO   265
....................       //Atencion!! Para hacer debug hay que tener en cuenta que antes la funcion esa le resta el offset que tiene luego la frecuencia es distinta  
.................... //!      dato=(int8)(frecuencia_R>>8); 
.................... //!      write_eeprom(direccion, dato); 
.................... //!      dato=(int8)(frecuencia_R); 
.................... //!      write_eeprom(direccion+1, dato); 
.................... //!       
.................... //!      dato=(int8)(frecuencia_G>>8); 
.................... //!      write_eeprom(direccion+2, dato); 
.................... //!      dato=(int8)(frecuencia_G); 
.................... //!      write_eeprom(direccion+3, dato); 
.................... //!       
.................... //!      dato=(int8)(frecuencia_B>>8); 
.................... //!      write_eeprom(direccion+4, dato); 
.................... //!      dato=(int8)(frecuencia_B); 
.................... //!      write_eeprom(direccion+5, dato); 
.................... //!       
.................... //!      dato=(int8)(frecuencia_C>>8); 
.................... //!      write_eeprom(direccion+6, dato); 
.................... //!      dato=(int8)(frecuencia_C); 
.................... //!      write_eeprom(direccion+7, dato); 
.................... //!       
.................... //!      direccion=direccion+9; 
.................... //!      if (direccion>=240){ 
.................... //!         direccion=0; 
.................... //!      } 
....................        
....................       
....................       i=0; 
0605:  CLRF   45
....................        //Esto es para intentar que se estabilice la señal. 
....................       while(lleno==0){ 
0606:  MOVF   5F,F
0607:  BTFSS  03.2
0608:  GOTO   64E
....................          colorant=detectar_color(frecuencia_R,frecuencia_B,frecuencia_G,frecuencia_C); 
0609:  MOVF   3E,W
060A:  MOVWF  61
060B:  MOVF   3D,W
060C:  MOVWF  60
060D:  MOVF   42,W
060E:  MOVWF  63
060F:  MOVF   41,W
0610:  MOVWF  62
0611:  MOVF   40,W
0612:  MOVWF  65
0613:  MOVF   3F,W
0614:  MOVWF  64
0615:  MOVF   44,W
0616:  MOVWF  67
0617:  MOVF   43,W
0618:  MOVWF  66
0619:  GOTO   4A0
061A:  MOVF   78,W
061B:  MOVWF  4A
....................          buffer[i]=colorant; 
061C:  MOVLW  4B
061D:  ADDWF  45,W
061E:  MOVWF  04
061F:  BCF    03.7
0620:  MOVF   4A,W
0621:  MOVWF  00
....................           
....................          if(i>0){ 
0622:  MOVF   45,F
0623:  BTFSC  03.2
0624:  GOTO   644
....................             if(buffer[i]==buffer[i-1]){ 
0625:  MOVLW  4B
0626:  ADDWF  45,W
0627:  MOVWF  04
0628:  BCF    03.7
0629:  MOVF   00,W
062A:  MOVWF  60
062B:  MOVLW  01
062C:  SUBWF  45,W
062D:  ADDLW  4B
062E:  MOVWF  04
062F:  BCF    03.7
0630:  MOVF   00,W
0631:  SUBWF  60,W
0632:  BTFSS  03.2
0633:  GOTO   642
....................                if(i>=capacidad-1){ 
0634:  MOVLW  01
0635:  SUBWF  5D,W
0636:  SUBWF  45,W
0637:  BTFSS  03.0
0638:  GOTO   641
....................                   color=colorant; 
0639:  MOVF   4A,W
063A:  MOVWF  49
....................                   lleno=1; 
063B:  MOVLW  01
063C:  MOVWF  5F
....................                   output_high(PIN_A1); 
063D:  BSF    03.5
063E:  BCF    05.1
063F:  BCF    03.5
0640:  BSF    05.1
....................                    
....................                    
....................                } 
....................                
....................             } 
....................             else{ 
0641:  GOTO   644
....................                 
....................                inicio=1; 
0642:  MOVLW  01
0643:  MOVWF  5E
....................                 
....................             } 
....................          } 
....................          if(lleno==0){ 
0644:  MOVF   5F,F
0645:  BTFSS  03.2
0646:  GOTO   64D
....................             if(inicio==1){ 
0647:  DECFSZ 5E,W
0648:  GOTO   64C
....................                i=0; 
0649:  CLRF   45
....................                inicio=0; 
064A:  CLRF   5E
....................             } 
....................             else{ 
064B:  GOTO   64D
....................                i++; 
064C:  INCF   45,F
....................             } 
....................          } 
....................       } 
064D:  GOTO   606
....................       lleno=0; 
064E:  CLRF   5F
....................        
....................  
....................  
.................... //!      write_eeprom(direccion, color); 
.................... //!      direccion++; 
.................... //!      if(direccion>240){ 
.................... //!         direccion=0; 
.................... //!      } 
....................        
.................... //!      genera_sonido(DOn); 
.................... //!      delay_ms(2000); 
.................... //!      genera_sonido(REn); 
.................... //!      delay_ms(2000); 
.................... //!      genera_sonido(MIn); 
.................... //!      delay_ms(2000); 
.................... //!      genera_sonido(FAn); 
.................... //!      delay_ms(2000); 
.................... //!      genera_sonido(SOLn); 
.................... //!      delay_ms(2000); 
.................... //!      genera_sonido(LAn); 
.................... //!      delay_ms(2000); 
.................... //!      genera_sonido(SIn); 
.................... //!      delay_ms(2000); 
.................... //!      write_eeprom(direccion, color); 
.................... //!      direccion++; 
.................... //!      if(direccion>254){ 
.................... //!         direccion=0; 
.................... //!      } 
....................       switch(color){ 
064F:  MOVF   49,W
0650:  BTFSC  03.2
0651:  GOTO   668
0652:  XORLW  01
0653:  BTFSC  03.2
0654:  GOTO   66B
0655:  XORLW  03
0656:  BTFSC  03.2
0657:  GOTO   674
0658:  XORLW  01
0659:  BTFSC  03.2
065A:  GOTO   67D
065B:  XORLW  07
065C:  BTFSC  03.2
065D:  GOTO   686
065E:  XORLW  01
065F:  BTFSC  03.2
0660:  GOTO   68F
0661:  XORLW  03
0662:  BTFSC  03.2
0663:  GOTO   698
0664:  XORLW  01
0665:  BTFSC  03.2
0666:  GOTO   6A1
0667:  GOTO   6A5
....................          case 0: 
....................             genera_sonido(NONE); 
0668:  CLRF   60
0669:  CALL   562
....................             break; 
066A:  GOTO   6A8
....................          case 1: 
....................             genera_sonido(Don); 
066B:  MOVLW  EE
066C:  MOVWF  60
066D:  CALL   562
....................             delay_ms(ntime); 
066E:  MOVLW  14
066F:  BSF    03.5
0670:  MOVWF  20
0671:  BCF    03.5
0672:  CALL   05D
....................             break; 
0673:  GOTO   6A8
....................          case 2: 
....................             genera_sonido(REn); 
0674:  MOVLW  D4
0675:  MOVWF  60
0676:  CALL   562
....................             delay_ms(ntime); 
0677:  MOVLW  14
0678:  BSF    03.5
0679:  MOVWF  20
067A:  BCF    03.5
067B:  CALL   05D
....................             break; 
067C:  GOTO   6A8
....................          case 3: 
....................             genera_sonido(MIn); 
067D:  MOVLW  BD
067E:  MOVWF  60
067F:  CALL   562
....................             delay_ms(ntime); 
0680:  MOVLW  14
0681:  BSF    03.5
0682:  MOVWF  20
0683:  BCF    03.5
0684:  CALL   05D
....................             break; 
0685:  GOTO   6A8
....................          case 4: 
....................             genera_sonido(FAn); 
0686:  MOVLW  B2
0687:  MOVWF  60
0688:  CALL   562
....................             delay_ms(ntime); 
0689:  MOVLW  14
068A:  BSF    03.5
068B:  MOVWF  20
068C:  BCF    03.5
068D:  CALL   05D
....................             break; 
068E:  GOTO   6A8
....................          case 5: 
....................             genera_sonido(SOLn); 
068F:  MOVLW  9F
0690:  MOVWF  60
0691:  CALL   562
....................             delay_ms(ntime); 
0692:  MOVLW  14
0693:  BSF    03.5
0694:  MOVWF  20
0695:  BCF    03.5
0696:  CALL   05D
....................             break; 
0697:  GOTO   6A8
....................          case 6: 
....................             genera_sonido(LAn); 
0698:  MOVLW  8D
0699:  MOVWF  60
069A:  CALL   562
....................             delay_ms(ntime); 
069B:  MOVLW  14
069C:  BSF    03.5
069D:  MOVWF  20
069E:  BCF    03.5
069F:  CALL   05D
....................             break; 
06A0:  GOTO   6A8
....................          case 7: 
....................             genera_sonido(SIn); 
06A1:  MOVLW  7E
06A2:  MOVWF  60
06A3:  CALL   562
....................             break; 
06A4:  GOTO   6A8
....................          default: 
....................             genera_sonido(NONE); 
06A5:  CLRF   60
06A6:  CALL   562
....................              
....................             break; 
06A7:  GOTO   6A8
....................       } 
....................  
....................    } 
06A8:  GOTO   5F8
....................     
.................... } 
06A9:  SLEEP

Configuration Fuses:
   Word  1: 2F38   NOWDT NOPUT MCLR NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG CCPB3 NOPROTECT INTRC_IO
   Word  2: 3FFF   FCMEN IESO
